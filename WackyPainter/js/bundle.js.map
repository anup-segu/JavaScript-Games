{"version":3,"sources":["webpack/bootstrap b1ed281bf886a0141da2","./js/main.js","./js/view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACtCA;;AAEA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACPD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;;AAGA;AACA;AACA;AACA;;AAEA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA,iBAAgB,QAAQ;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,sBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b1ed281bf886a0141da2\n **/","/* globals $ */\n\nvar View = require(\"./view\");\n\n$(function () {\n  var $easel = $(\"#easel\");\n  new View($easel);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 1\n ** module chunks = 0\n **/","function View($el) {\n  this.$el = $el;\n  this.setupEasel();\n}\n\nView.prototype.exercise0 = function () {\n  //Challenge: (example) remove the 'square' class from every li\n  //Result: this should cause the grid to turn into a long list of undecorated lis\n  //just a list of dots\n\n  //this one completed as an example :) no additional code necessary\n  $('li').removeClass(\"square\");\n};\n\nView.prototype.exercise1 = function () {\n  //Challenge: Give every square the class 'orange'\n  //Result: every square should turn orange (we already have a CSS rule)\n\n  //your code here!\n  $('li').addClass(\"orange\");\n};\n\nView.prototype.exercise2 = function () {\n  //Challenge: Give every square a dashed border\n  //Result: Every square gets a dashed border. The grid is no longer a square\n  //because the dimensions of the squares are different and they no longer fit\n  //into the grid's width.\n\n  //your code here!\n  $('li').css(\"border\", \"dashed\");\n};\n\nView.prototype.exercise3 = function () {\n  //Challenge: Add an <h1> with the text 'i love jquery' under the grid.\n  //Result: An <h1> with the text 'i love jquery' appears under the grid.\n\n  //your code here!\n  $('body').append(\"<h1>i love jquery</h1>\");\n};\n\nView.prototype.exercise4 = function () {\n  //Challenge: Write your first name in every other square.\n  //Result: Your name appears in every other square.\n\n  //your code here!\n  $('li').each(function (index){\n    if (index % 2 === 0){\n      $(\"<p>Anup</p>\").appendTo(this);\n    }\n  });\n};\n\nView.prototype.exercise5 = function () {\n  //Challenge: Alert the row and column of the square, when the square is clicked.\n  //Result: When a square is clicked, the row and column appear in an alert. for\n  //example: clicking the top left square should alert '0, 0'.\n\n  //hint: look at line 28 of this file: we set the 'data-pos' of every square\n  //your code here!\n  $('li').on(\"click\", function(){\n    var $square = $(event.currentTarget);\n    // console.log($square.data(\"pos\"));\n    alert($square.data(\"pos\"));\n  });\n};\n\nView.prototype.exercise6 = function () {\n  //Challenge: Give every square a random color!\n  //Result: Every square becomes a color as soon as this code runs. The grid\n  //should become a beautiful rainbow of colors.\n\n  //your code here!\n  //hint: this array might make it easy to assign random colors\n  var colors = [\n    'darksalmon',\n    'cornflowerblue',\n    'red',\n    'yellow',\n    'wheat',\n    'hotpink',\n    'lawngreen'\n  ];\n\n  var randomNum = function(){\n    return Math.floor(Math.random() * colors.length);\n  };\n\n  $('li').each(function (index, el) {\n    var $li = $(el);\n    $li.css(\"background-color\", colors[randomNum()]);\n  });\n};\n\nView.prototype.exercise7 = function(){\n  //Challenge: When your mouse goes over a square, console log its color.\n  //Result: When the mouse goes over a square its color should appear in the\n  //console. The color won't be the color's name, but its rbg value.\n  //You should push the button for exercise 6 first to try it on the\n  //rainbow.\n\n  //your code here!\n  $('li').hover(function() {\n    var $el = $(this);\n    console.log($el.css(\"background-color\"));\n  });\n};\n\n\nView.prototype.setupEasel = function () {\n  var $addRowButton = $(\"<button>\").html(\"Add a row\");\n  this.$el.append($addRowButton);\n  $addRowButton.on(\"click\", this.addRow.bind(this));\n\n  for(var j = 0; j <= 7; j++){\n    var $button = $(\"<button>\").html(\"Exercise \" + j);\n    $button.on(\"click\", this[\"exercise\" + j]);\n    this.$el.append($button);\n  }\n\n  for(var i = 0; i < 20; i ++) {\n    this.addRow();\n  }\n\n  this.bindEvents();\n};\n\nView.prototype.bindEvents = function () {\n  var colors = [\n    'darksalmon',\n    'cornflowerblue',\n    'red',\n    'yellow',\n    'wheat',\n    'hotpink',\n    'lawngreen'\n  ];\n\n  this.$el.on(\"mouseenter\", \".square\", function (e) {\n    var $square = $(e.currentTarget);\n    var numColor = Math.floor(Math.random() * colors.length);\n    $square.css(\"background-color\", colors[numColor]);\n  });\n};\n\nView.prototype.addRow = function () {\n  var rowIdx = this.$el.find(\".row\").length;\n  var $row = $(\"<ul>\").addClass(\"row\").addClass(\"group\");\n  for(var colIdx = 0; colIdx < 20; colIdx++) {\n    var $square = $(\"<li>\").addClass(\"square\").attr(\"data-pos\", [rowIdx, colIdx]);\n    $row.append($square);\n  }\n  this.$el.append($row);\n};\n\n\n//WARNING SOLUTIONS BELOW!!!!\n//WORK AS HARD AS POSSIBLE ON SOLVING EACH PROBLEM\n//BEFORE READING ITS SOLUTION\n//\n// View.prototype.exercise1 = function () {\n//   $(\"li\").addClass(\"orange\");\n// };\n//\n//\n//\n//\n//\n//\n//\n//\n// View.prototype.exercise2 = function () {\n//   $(\".square\").css(\"border\", \"dashed\");\n// };\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// View.prototype.exercise3 = function () {\n//   var h1 = $(\"<h1>\").text(\"I love jQuery\");\n//   $(\"#easel\").append(h1);\n// };\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// View.prototype.exercise4 = function () {\n//   $(\".square:nth-child(even)\").text(\"Jeff\");\n//   //this could also be solved using iteration and %\n// };\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// View.prototype.exercise5 = function () {\n//   //hint: look at line 28 of this file: we set the 'data-pos' of every square\n//   $('.square').on(\"click\", function(e){\n//     var $sq = $(e.currentTarget);\n//     alert($sq.attr(\"data-pos\"));\n//   });\n// };\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// View.prototype.exercise6 = function () {\n//   var colors = [\n//     'darksalmon',\n//     'cornflowerblue',\n//     'red',\n//     'yellow',\n//     'wheat',\n//     'hotpink',\n//     'lawngreen'\n//   ];\n//\n//   $('.square').each(function(idx, el){\n//     var $sq = $(el);\n//     var color = colors[Math.floor((Math.random() * colors.length))];\n//     $sq.css(\"background-color\", color)\n//   })\n// };\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// View.prototype.exercise7 = function(){\n//   $('#easel').on(\"mouseenter\", \".square\", function(e){\n//     var $sq = $(e.currentTarget);\n//     console.log($sq.css(\"background-color\"));\n//   });\n// };\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/view.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}